---
# ######################################### Basic Parameters #######################################

# Seed for python's PRNG:
# random_seed: 377

# The region in question:
region: Luxembourg

# A list of all location types:
locations:
  - House
  - Care Home
  - OW Agriculture
  - OW Extraction
  - OW Manufacturing
  - OW Energy
  - OW Water
  - OW Construction
  - OW Trade
  - OW Transport
  - OW Catering and Accommodation
  - OW ICT
  - OW Finance
  - OW Real Estate
  - OW Technical
  - OW Administration
  - OW Education
  - OW Entertainment
  - OW Other Services
  - Primary School
  - Secondary School
  - Restaurant
  - Outdoor
  - Car
  - Public Transport
  - Shop
  - Medical
  - Hospital
  - Hotel
  - Place of Worship
  - Indoor Sport
  - Cinema or Theatre
  - Museum or Zoo
  - Belgium
  - France
  - Germany
  - Cemetery


# Activities allowed within the simulation, and the locations that may be performed at these locations
activities:
  House: [House, Care Home, Belgium, France, Germany]
  Work: [Care Home, OW Agriculture, OW Extraction, OW Manufacturing, OW Energy, OW Water, OW Construction, OW Trade, OW Transport, 
         OW Catering and Accommodation, OW ICT, OW Finance, OW Real Estate, OW Technical, OW Administration, OW Education, OW Entertainment,
         OW Other Services, Primary School, Secondary School, Restaurant, Public Transport, Shop, Medical, Hospital, Hotel, Place of Worship,
         Indoor Sport, Cinema or Theatre, Museum or Zoo]
  School: [Primary School, Secondary School]
  Restaurant: [Restaurant]
  Outdoor: [Outdoor]
  Car: [Car]
  Public Transport: [Public Transport]
  Shop: [Shop]
  Medical: [Medical, Hospital]
  Place of Worship: [Place of Worship]
  Indoor Sport: [Indoor Sport]
  Cinema or Theatre: [Cinema or Theatre]
  Museum or Zoo: [Museum or Zoo]
  Visit: [House, Care Home]


# ######################################### Time ###################################################

# Time length of each tick in the simulation. Weeks must contain the same number of ticks, because
# we use weekly routines. This means the week length (604800) should be divisible by the follwoing
# tick length:
tick_length_s: 600

# How long the simulation should run for, in days. Note the number of iterations will be computed
# from the tick length above:
simulation_length_days: 140

# With syntax being anything accepted by Dateparser:
# https://dateparser.readthedocs.io/en/latest/
# the date at which the simulation starts:
epoch: 1st March 2020 #23th February 2020




# ######################################### Logging ################################################

# Format is https://docs.python.org/3/library/logging.config.html#logging-config-dictschema
logging:
  version: 1
  disable_existing_loggers: False
  formatters:
    standard:
      # format: '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
      format: '[%(levelname)s] %(name)s: %(message)s'
  handlers:
    default:
      level: INFO
      formatter: standard
      class: logging.StreamHandler
      stream: 'ext://sys.stdout'  # Default is stderr
  loggers:
    '':   # root logger
      handlers: ['default']
      level: INFO
      propagate: False
#    'my.packg':
#      handlers: ['default']
#      level: INFO
#      propagate: False
#    '__main__':
#        handlers': ['default']
#        level: DEBUG
#        propagate: False

# ######################################### Output #################################################


telemetry:
  host: 127.0.0.1
  port: 4567

# Output that should be rendered from the simulation:
reporters:
  cli.TimeReporter: {}
  csv.HealthStateCounts:
    filename: /tmp/health_state_counts.csv
  csv.ActivityCounts:
    filename: /tmp/activity_counts.csv
  csv.LocationTypeCounts:
    filename: /tmp/location_type_counts.csv
  csv.TestingCounts:
    filename: /tmp/testing_counts.csv
  csv.QuarantineCounts:
    filename: /tmp/quarantine_counts.csv
  csv.TestingEvents:
    filename: /tmp/testing_events.csv
  csv.ExposureEvents:
    filename: /tmp/exposure_events.csv
  csv.ContactCounts:
    filename: /tmp/average_contact_counts.csv
  csv.VaccinationEvents:
    filename: /tmp/vaccination_events.csv
#  effective_reproduction_number.EffectiveReproductionNumber:
#    filename_rescaled_cum_counts: /tmp/rescaled_cum_testing_counts.csv
#    filename_rt_estimate: /tmp/rt_estimate.csv
#    state: LU
  csv.SecondaryInfectionCounts:
    filename: /tmp/secondary_infection_counts.csv
    #  - location_population_plots.LocationPlots:
#      dirname: /tmp/plots
#      types_to_show: []
#      health_to_show: [INFECTED]
#      figure_size: [15, 20]  # width, height
#      every_n: 1


# ######################################### Map ##############################################

map_factory:
  __type__: jrc.JRCMapFactory

  # Seed the PRNG, Used when resampling the density matrix
  __prng_seed__: 111

  # Country code to extract from the distribution data
  country_code: LU
  # File containing initial distribution of population, and see Docs for full format:
  # FIXME: this is currently not relative to config path, but relative to pwd
  population_distribution_fp: Scenarios/Luxembourg/Population Distribution.csv
  # Shapefile describing the borders of the country:
  # FIXME: this is currently not relative to config path, but relative to pwd
  shapefilename: Scenarios/Luxembourg/Map/LIMADM_CANTONS.shp
  # The coordinate system used in the shapefile. If this is ETRS89 (EPSG: 3035) then leave it blank:
  shapefile_coord_system: epsg:2169
  # The following density map scale factor resamples the input map to be of higher resolution,
  # linearly interpolating to produce a smoother population distribution without hard edges. Set
  # this parameter equal to 1 to do no resampling:
  res_fact: 2
  # Density map normalization rescales population within grid squares. In particular, if the
  # population of a certain grid square is zero before resampling and if this option is set True,
  # then after resampling the population of that grid square will also be zero. This is therefore a
  # modification of the linear interpolation to prevent poplation from leaking into previously
  # unpopulated squares, with the cost being the retention of some, but not all, hard edges:
  normalize_interpolation: True

# map_factory:
#   __type__: uniform.UniformMapFactory

#   # Used when resampling the density matrix
#   __prng_seed__: 111

#   # Country code used in logging
#   country_code: UNI
#   # Width and height of rectangular map in meters
#   width_m: 100000
#   height_m: 100000

# map_factory:
#   __type__: gaussian.GaussianMapFactory

#   # Used when resampling the density matrix
#   __prng_seed__: 111
#   # Total mass of Gaussian kernel
#   mass: 100000
#   # Standard deviation of the Gaussian kernel:
#   sd_cluster: 20
#   # Country code used in logging
#   country_code: GAUSS
#   # Width of square map in meters
#   width_m: 100000

# ######################################### World ##############################################

world_factory:

  __type__: stochastic.StochasticWorldFactory

  # Seed the PRNG
  __prng_seed__: 111

  # The total number of resident agents on the world. If this equals the sum of age_distribution
  # (that is, the real total resident population) then the scale factor for the simulation will be 1,
  # else the location counts and certain other parameters will be scaled according to the ratio of
  # this number and the sum. Note that the true population will be somewhat larger than this number
  # due to the inclusion of border workers (the numbers of which is again calculated using the scale
  # factor).
  #n: 161080
  n: 10000

  # For each location type, a number of such locations will be generated. This number will be either
  # fixed or random. The locations with a fixed count are generated according to the following real
  # world distribution:
  deterministic_location_counts:
    Care Home:                        44
    OW Agriculture:                   86
    OW Extraction:                    11
    OW Manufacturing:                 785
    OW Energy:                        98
    OW Water:                         71
    OW Construction:                  4366
    OW Trade:                         4684
    OW Transport:                     1349
    OW Catering and Accommodation:    251
    OW ICT:                           2752
    OW Finance:                       1241
    OW Real Estate:                   1458
    OW Technical:                     8349
    OW Administration:                2433
    OW Education:                     838
    OW Entertainment:                 87
    OW Other Services:                1523
    Primary School:                   181
    Secondary School:                 58
    Restaurant:                       2247
    Outdoor:                          1
    Public Transport:                 1468
    Shop:                             3136
    Medical:                          125
    Hospital:                         11
    Hotel:                            213
    Place of Worship:                 677
    Indoor Sport:                     199
    Cinema or Theatre:                34
    Museum or Zoo:                    77
    Cemetery:                         1

  # These locations have a random count:
  random_location_counts: [House, Car]

  # The border countries, as single locations, are assigned these [lat, lon] (WGS84) coordinates:
  border_country_coord:
    Belgium: [49.683729, 5.814469]
    France: [49.357664, 6.166023]
    Germany: [49.756279, 6.643219]

  # Age range of border workers
  min_age_border_workers: 18
  max_age_border_workers: 64

  # Distribution of non-resident agents by border country.
  border_countries_pop:
    Belgium: 44_900
    France:  94_600
    Germany: 45_100

  # Distribution of resident agents by age.
  age_distribution:
    - 6356  # 0 Years old
    - 6604  # 1 Year old
    - 6645
    - 6653
    - 6724
    - 6837
    - 6878
    - 6749
    - 6609
    - 6921
    - 6687 # 10 Years old
    - 6724
    - 6593
    - 6598
    - 6499
    - 6528
    - 6435
    - 6499
    - 6674
    - 7195
    - 7140  # 20 Years old
    - 7113
    - 7728
    - 8116
    - 8443
    - 8949
    - 9336
    - 9685
    - 9499
    - 10104
    - 9838 # 30 Years old
    - 10090
    - 9849
    - 9989
    - 9667
    - 9708
    - 9787
    - 9922
    - 9807
    - 9927
    - 9530 # 40 Years old
    - 9518
    - 9555
    - 9220
    - 9235
    - 9170
    - 8980
    - 9231
    - 9489
    - 9264
    - 9426 # 50 Years old
    - 9481
    - 9503
    - 9256
    - 9334
    - 9180
    - 8898
    - 8494
    - 8181
    - 7796
    - 7547 # 60 years old
    - 7219
    - 6865
    - 6606
    - 6238
    - 6095
    - 5781
    - 5539
    - 5019
    - 5076
    - 4937 # 70 years old
    - 4811
    - 4502
    - 4199
    - 3611
    - 3557
    - 3499
    - 3320
    - 3011
    - 2905
    - 3012 # 80 Years old
    - 2744
    - 2508
    - 2328
    - 2076
    - 1904
    - 1699
    - 1551
    - 1498
    - 1354
    - 1097 # 90 Years old
    - 814
    - 631
    - 492
    - 375
    - 842 # 95+ Years old

  # ######################################### Household Distribution #################################

  # Distribution of numbers of children and numbers of retired, given house size. The numbers below
  # are derived from 2001 Census data:
  #
  # https://statistiques.public.lu/en/population-employment/index.html
  #
  # Note that categories '5' and '7' were '5+' and '7+' in the 2001 Census data. Note also that
  # 'children' in the 2001 Census data referred to ages 0-14, as opposed to 0-17. The format is:
  #
  #                                 Househould size
  #                   0      1      2      3      4     5     6    7
  #            0 [    x,     x,     x,     x,     x,    x,    x,   x]
  #  Number    1 [    x,     x,     x,     x,     x,    x,    x,   x]
  #    of      2 [    x,     x,     x,     x,     x,    x,    x,   x]
  #   Type     3 [    x,     x,     x,     x,     x,    x,    x,   x]
  #            4 [    x,     x,     x,     x,     x,    x,    x,   x]
  #            5 [    x,     x,     x,     x,     x,    x,    x,   x]
  #            6 [    x,     x,     x,     x,     x,    x,    x,   x]
  #            7 [    x,     x,     x,     x,     x,    x,    x,   x]

  # Household distribution of children:
  household_distribution_children:
    - [    0, 50384, 46191, 15885,  9035, 2514,  784, 276]
    - [    0,     0,  2382, 12257,  4972, 2041,  514, 149]
    - [    0,     0,     0,  1108, 14021, 2180,  720, 205]
    - [    0,     0,     0,     0,   253, 4165,  622, 219]
    - [    0,     0,     0,     0,     0,   38,  737, 150]
    - [    0,     0,     0,     0,     0,    0,    5, 146]
    - [    0,     0,     0,     0,     0,    0,    0,   0]
    - [    0,     0,     0,     0,     0,    0,    0,   0]

  # Age below which an agent is considered a child
  child_age_limit: 15

  # Household distribution of retired:
  household_distribution_retired:
    - [    0, 33586, 30677, 25001, 26510, 9743, 2706, 821]
    - [    0, 16798,  6893,  2388,  1240,  971,  445, 191]
    - [    0,     0, 11003,  1656,   483,  207,  214, 112]
    - [    0,     0,     0,   206,    36,   11,   12,  19]
    - [    0,     0,     0,     0,    12,    4,    3,   0]
    - [    0,     0,     0,     0,     0,    1,    2,   2]
    - [    0,     0,     0,     0,     0,    0,    0,   0]
    - [    0,     0,     0,     0,     0,    0,    0,   0]

  # Age at or above which an agent is considered retired
  retired_age_limit: 65

  # Each carehome will be assigned a number of retired people as residents:
  retired_per_carehome: 143

  # ######################################### Workforce Distribution #################################

  # For these locations, workforce weights are uniform:
  workforce_profile_uniform:
    Care Home:                        70
    Primary School:                   35
    Secondary School:                 85
    Public Transport:                 1
    Place of Worship:                 1

  # For these locations, workforce weights are sampled from a distribution determined by the
  # corresponding list. The format is given below:
  workforce_profile_distribution:
    OW Agriculture:                   [76,   8,    1,   1,    0]
    OW Extraction:                    [3,    4,    2,   2,    0]
    OW Manufacturing:                 [369,  201,  101, 88,  26]
    OW Energy:                        [78,   11,   3,   5,    1]
    OW Water:                         [29,   21,   13,  7,    1]
    OW Construction:                  [2786, 1040, 360, 155, 25]
    OW Trade:                         [3570, 621,  159, 83,   7]
    OW Transport:                     [818,  299,  120, 99,  13]
    OW Catering and Accommodation:    [1728, 829,  118, 30,   6]
    OW ICT:                           [2313, 302,  98,  64,   9]
    OW Finance:                       [862,  222,  57,  68,  32]
    OW Real Estate:                   [1353, 92,   11,  2,    0]
    OW Technical:                     [7315, 795,  153, 69,  17]
    OW Administration:                [1958, 298,  85,  67,  25]
    OW Education:                     [789,  41,   6,   2,    0]
    OW Entertainment:                 [295,  47,   16,  5,    0]
    OW Other Services:                [1290, 211,  15,  7,    0]
    Restaurant:                       [1728, 829,  118, 30,   6]
    Shop:                             [2519, 691,  107, 53,  10]
    Medical:                          [13,   2,    1,   11,   0]
    Hospital:                         [0,    0,    0,   0,    8]
    Hotel:                            [1728, 829,  118, 30,   6]
    Indoor Sport:                     [295,  47,   16,  5,    0]
    Cinema or Theatre:                [2313, 302,  98,  64,   9]
    Museum or Zoo:                    [295,  47,   16,  5,    0]

  # The data format was originally [0-4, 5-19, 20-49, 50-249, 250+]. The maximum weight is now given:
  workforce_profile_distribution_format: [[1,5], [5,20], [20,50], [50,250], [250,500]]

  # ######################################### Location Choice ########################################

  # The mobility data used to construct location choice functions:
  location_choice_fp: Scenarios/Luxembourg/Lux Mobil.csv
  # Resident nationality:
  resident_nationality: Luxembourg
  # Which activies are assigned locations using a distance distribution, and how many such locations
  # can be visited by each agent:
  activity_locations_by_distance:
    Visit: 10
    Restaurant: 10
    Shop: 10
  # When using a distance distribution, how many locations are included in the sample to which the
  # distribution is applied, noting that a large number will result in performance issues:
  location_sample_size: 100
  # Which activies are assigned locations using a simple random sample, and how many such locations
  # can be visited by each agent:
  activity_locations_by_random:
    Public Transport: 10
    Cinema or Theatre: 10
    Museum or Zoo: 10
  # Which activies are assigned locations using a KDTree, with only one such location is assigned to
  # each agent:
  activity_locations_by_proximity: [Medical, Place of Worship, Indoor Sport]
  # Which activities correspond to going to school, assigned using a KDTree:
  school_locations_by_proximity: [School]
  # For each of the countries listed below, a probability distribution is built on the length of trips
  # between that country and the country being simulated. This discrete probability distribution takes
  # the form of a histogram and is derived from data. The parameters below determine, for country
  # of origin, the width of bins used in the corresponding histograms and the total number of bins.
  # Distances greater than the total range of a histogram will be assigned probability zero. The
  # units here are kilometers.
  number_of_bins:
    Luxembourg: 10
    Belgium:    20
    France:     20
    Germany:    20
  bin_width:
    Luxembourg: 10
    Belgium:    10
    France:     10
    Germany:    10
  # This converts the relevant activities and countries to their labels in the trip data:
  activity_dict:
    Visit: Visite
    Shop: Achats
    Restaurant: Repas
    Work: Travail
  origin_country_dict:
    Luxembourg: Luxembourg
    Belgium: Belgique
    France: France
    Germany: Allemagne
  destination_country: Luxembourg
  # The distances referred to above are distances along a real world transportation network. This
  # typically differs from the spherical distance. Over short distances, the spherical distance is
  # approximately equal to the Euclidean distance. The ratio of the network distance and the Euclidean
  # distance is called the 'network detour ratio'. The network distance is often around 1.25–1.41
  # times the Euclidean distance. The article
  #
  # Hai Yanga, Jintao Kea and Jieping Ye, 'A universal distribution law of network detour ratios',
  # Transportation Research Part C, 2018.
  #
  # suggests that network distance follows a distribution of the form
  #
  # network_distance = euclidean_distance*alpha + beta
  #
  # for two parameters alpha and beta, which the authors determine as follows:
  alpha: 1.2988
  beta:  0.3838

  # Schools
  # Number of classes per school:
  num_classes_per_school:
    Primary School:   17
    Secondary School: 34

  # Age at which children start school:
  starting_age:
    4:  Primary School
    12: Secondary School


# ######################################### Movement ##############################################

# Configures the movement model used during simulation
movement_model:
  __type__: simple_random.SimpleRandomMovementModel
  __prng_seed__: 888
  # A list of all location types:
  location_types:
    - House
    - Care Home
    - OW Agriculture
    - OW Extraction
    - OW Manufacturing
    - OW Energy
    - OW Water
    - OW Construction
    - OW Trade
    - OW Transport
    - OW Catering and Accommodation
    - OW ICT
    - OW Finance
    - OW Real Estate
    - OW Technical
    - OW Administration
    - OW Education
    - OW Entertainment
    - OW Other Services
    - Primary School
    - Secondary School
    - Restaurant
    - Outdoor
    - Car
    - Public Transport
    - Shop
    - Medical
    - Hospital
    - Hotel
    - Place of Worship
    - Indoor Sport
    - Cinema or Theatre
    - Museum or Zoo
    - Belgium
    - France
    - Germany
    - Cemetery
    # When responding to activity changes, the location model will move agents.
    # Add a location type to the list below if this shouldn't happen when the agent is
    # in a certain health state
  no_move_health_states:
    - HOSPITALIZING
    - VENTILATING
    - DEAD
  # Public transport activity type
  public_transport_activity_type: Public Transport
  # Units of public transport avaiable at each 10 minute interval of the day
  units_available_week_day: [235, 216, 154, 98, 46, 25, 14, 3, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 3, 3, 3, 17, 30, 44, 110, 178, 259, 342, 408, 467, 574, 608, 667, 750, 796, 909, 1004, 1080, 1206, 1359, 1410, 1458, 1468, 1334, 1186, 1086, 1094, 1053, 1082, 1055, 980, 913, 911, 904, 926, 906, 878, 863, 873, 830, 868, 845, 858, 828, 841, 850, 858, 855, 879, 911, 951, 966, 940, 935, 955, 934, 986, 955, 937, 918, 940, 957, 1024, 1074, 1063, 1053, 1081, 1013, 1060, 995, 975, 962, 984, 983, 1073, 1065, 1103, 1136, 1146, 1113, 1148, 1184, 1180, 1136, 1170, 1118, 1098, 1107, 1069, 1067, 1095, 1024, 995, 954, 906, 861, 829, 754, 726, 675, 635, 651, 606, 585, 633, 583, 575, 545, 518, 521, 556, 512, 500, 472, 437, 412, 433, 377, 359, 335, 297]
  units_available_weekend_day: [214, 200, 159, 104, 55, 34, 22, 28, 27, 37, 37, 38, 38, 38, 28, 31, 27, 28, 28, 36, 32, 37, 37, 28, 29, 29, 26, 52, 73, 129, 163, 197, 227, 276, 306, 352, 397, 425, 443, 457, 435, 480, 504, 508, 487, 486, 475, 488, 521, 574, 554, 552, 549, 553, 539, 558, 531, 514, 513, 520, 527, 559, 519, 527, 506, 506, 496, 522, 542, 544, 539, 538, 522, 550, 565, 567, 576, 565, 564, 598, 586, 580, 564, 594, 588, 624, 623, 618, 600, 609, 602, 649, 601, 583, 563, 535, 530, 582, 582, 599, 596, 570, 568, 600, 605, 586, 549, 556, 557, 567, 560, 582, 582, 586, 551, 557, 547, 539, 534, 534, 519, 499, 488, 452, 461, 431, 434, 443, 423, 422, 396, 390, 378, 362, 358, 375, 362, 344, 333, 333, 314, 295, 290, 263]

# ######################################### Activity #####################################
# Configure the component that drives agents performing different activities in the simulation
# activity_model:

#   __type__: tus_survey.TUSMarkovActivityModel
#   # TODO: __type__

#   # File containing time use survey data, and see Docs for full format:
#   time_use_filepath: Time Use.csv

#   # Behavioural types with corresponding age ranges
#   behavioural_types:
#     Child: [0,18]
#     Adult: [18,65]
#     Retired: [65,120]

#   # Special weekly routine used for all border workers
#   border_worker_routine: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

#   # TUS data are read at a ten-minute interval.
#   #
#   # This parameter should be set to the simulation tick duration in seconds, so that the TUS
#   # data can be resampled to match the simulation resolution
#   tick_length_s: 600

#   # Which activities are coded in the dataset.
#   # Codes in the primary column are less specific, but used first.
#   # codes in the secondary column are used if certain codes are in the primary column.
#   #
#   # Format is
#   #   Activity Label:
#   #     primary: [code, code,...]
#   #     secondary: [code, code,...]
#   activity_code_map:
#     House:
#       primary: [1]
#       secondary: [11,12,13,14,21,22,23,31,34,35,39,115,121,213,214,221,222,231,239,311,314,315,324,
#                   325,326,327,328,329,333,346,347,349,351,353,354,356,363,364,371,381,382,383,384,
#                   386,391,393,419,421,422,431,432,433,434,511,512,522,551,711,713,714,719,733,734,
#                   737,739,744,745,746,747,749,811,812,813,819,821,829,839]
#     Work:
#       primary: [2]
#       secondary: [111]
#     School:
#       primary: [3]
#       secondary: [232,233]
#     Restaurant:
#       primary: [5]
#       secondary: [546,547]
#     Outdoor:
#       primary: [6,9,10,11,12,14]
#       secondary: [343,345,411,412,413,415,424,439,525,539,541,542,543,545,548,549,612,613,614,617,618,619,629]
#     Car:
#       primary: [13]
#     Public Transport:
#       primary: [15,16,17,18,19]
#     Shop:
#       secondary: [361,362,366,367,368,369,425]
#     Medical:
#       secondary: [365]
#     Place of Worship:
#       secondary: [435]
#     Indoor Sport:
#       secondary: [544,615,616]
#     Cinema or Theatre:
#       secondary: [531,532,533]
#     Museum or Zoo:
#       secondary: [534]
#     Visit:
#       primary: [4]
#       secondary: [395,426,429,515,521,523,524]

#   # If agents are in these states, stop the markov chain
#   stop_activity_health_states:
#     - DEAD

activity_model:

  __type__: tus_survey_basic.TUSBasicActivityModel
  __prng_seed__: 888

  # File containing time use survey data, and see Docs for full format:
  time_use_filepath: Time Use.csv

  # Special weekly routine used for all border workers
  border_worker_routine: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

  # TUS data are read at a ten-minute interval.
  #
  # This parameter should be set to the simulation tick duration in seconds, so that the TUS
  # data can be resampled to match the simulation resolution
  tick_length_s: 600

  # Length of each age bracket, in years, when dividing the TUS data into chunks
  age_bracket_length: 10

  # Which activities are coded in the dataset.
  # Codes in the primary column are less specific, but used first.
  # codes in the secondary column are used if certain codes are in the primary column.
  #
  # Format is
  #   Activity Label:
  #     primary: [code, code,...]
  #     secondary: [code, code,...]
  activity_code_map:
    House:
      primary: [1]
      secondary: [11,12,13,14,21,22,23,31,34,35,39,115,121,213,214,221,222,231,239,311,314,315,324,
                  325,326,327,328,329,333,346,347,349,351,353,354,356,363,364,371,381,382,383,384,
                  386,391,393,419,421,422,431,432,433,434,511,512,522,551,711,713,714,719,733,734,
                  737,739,744,745,746,747,749,811,812,813,819,821,829,839]
    Work:
      primary: [2]
      secondary: [111]
    School:
      primary: [3]
      secondary: [232,233]
    Restaurant:
      primary: [5]
      secondary: [546,547]
    Outdoor:
      primary: [6,9,10,11,12,14]
      secondary: [343,345,411,412,413,415,424,439,525,539,541,542,543,545,548,549,612,613,614,617,618,619,629]
    Car:
      primary: [13]
    Public Transport:
      primary: [15,16,17,18,19]
    Shop:
      secondary: [361,362,366,367,368,369,425]
    Medical:
      secondary: [365]
    Place of Worship:
      secondary: [435]
    Indoor Sport:
      secondary: [544,615,616]
    Cinema or Theatre:
      secondary: [531,532,533]
    Museum or Zoo:
      secondary: [534]
    Visit:
      primary: [4]
      secondary: [395,426,429,515,521,523,524]

# ######################################### Infection and Disease ##################################

disease_model:

  __type__: compartmental.CompartmentalModel
  __prng_seed__: 888

  # If the PPM intervention is enabled, these must match for the model to be valid. Avoiding this
  # dependency is a TODO list item! Refers to the 10 minute tick, like transmission prob!
  personal_protective_measures:
    # According to https://arxiv.org/pdf/2004.13553.pdf the effect of face masks is modelled by the
    # mask transmission rate and mask absorption rate, which denote the proportion of viruses that are
    # stopped by the mask during exhaling (transmission) versus inhaling (absorption), respectively.
    # The authors set both these rates equal to 0.7, to model the use of inexpensive, widely available
    # and even nonmedical or homemade masks. The following is then the probability that the virus
    # particles, during a tick, pass through a mask:
    #ppm_coeff: 0.3
    ppm_coeff: 1.0
    # The probability that an agent is engaged in the strategy:
    ppm_force: 0.0
    # Parameter updates
    ppm_force_updates:
      20th April 2020: 0.8
      11th May 2020: 1.0
    # The probability that an individual wears a mask in each location, given that the individual follows
    # the recommendations in place:
    ppm_strategy:
      House:                          0.0
      Care Home:                      0.2
      OW Agriculture:                 0.2
      OW Extraction:                  0.2
      OW Manufacturing:               0.2
      OW Energy:                      0.2
      OW Water:                       0.2 
      OW Construction:                0.2
      OW Trade:                       0.2
      OW Transport:                   0.2
      OW Catering and Accommodation:  0.2
      OW ICT:                         0.2
      OW Finance:                     0.2
      OW Real Estate:                 0.2
      OW Technical:                   0.2
      OW Administration:              0.2
      OW Education:                   0.2
      OW Entertainment:               0.2
      OW Other Services:              0.2
      Primary School:                 0.2
      Secondary School:               0.2
      Restaurant:                     0.2
      Outdoor:                        0.0
      Car:                            0.0
      Public Transport:               1.0
      Shop:                           1.0
      Medical:                        1.0
      Hospital:                       0.0 # Masks are always warn in hospitals, as below
      Hotel:                          1.0
      Place of Worship:               1.0
      Indoor Sport:                   0.2
      Cinema or Theatre:              0.2
      Museum or Zoo:                  1.0
      Belgium:                        0.0
      France:                         0.0
      Germany:                        0.0
      Cemetery:                       0.0

  # If p is the baseline transmission probability, q is the probability of an individual
  # wearing a mask and r = ppm_coeff is the proportion of virus particles passing through the
  # mask, then the true transmission probability between two individuals, each of which may or
  # may not be wearing a mask, is:
  #
  # p_true = p(r^2q^2 + 2rq(1-q) + (1-q)^2) = p(1-(1-r)q)^2
  #  
  # Moreover q = (probabability an agent wears a mask, given that the agent follows the
  #               rules) * (probability that the agent follows the rules)
  #             = ppm_strategy * ppm_force
  #
  # In this case both ppm_strategy (as above) and p = infection_probabilities_per_tick (as below)
  # are allowed to vary accross different types of location. The probability p is of an contagious
  # agent trasmitting the virus to a susceptible agent sharing a given location on each tick:
  infection_probabilities_per_tick:
    House:                            0.0002
    Care Home:                        0.0002
    OW Agriculture:                   0.0002
    OW Extraction:                    0.0002
    OW Manufacturing:                 0.0002
    OW Energy:                        0.0002
    OW Water:                         0.0002
    OW Construction:                  0.0002
    OW Trade:                         0.0002
    OW Transport:                     0.0002
    OW Catering and Accommodation:    0.0002
    OW ICT:                           0.0002
    OW Finance:                       0.0002
    OW Real Estate:                   0.0002
    OW Technical:                     0.0002
    OW Administration:                0.0002
    OW Education:                     0.0002
    OW Entertainment:                 0.0002
    OW Other Services:                0.0002
    Primary School:                   0.0002
    Secondary School:                 0.0002
    Restaurant:                       0.0002
    Outdoor:                          0.0
    Car:                              0.0002
    Public Transport:                 0.0002
    Shop:                             0.0002
    Medical:                          0.0002
    Hospital:                         0.000018 # p*0.09
    Hotel:                            0.0002
    Place of Worship:                 0.0002
    Indoor Sport:                     0.0002
    Cinema or Theatre:                0.0002
    Museum or Zoo:                    0.0002
    Belgium:                          0.0
    France:                           0.0
    Germany:                          0.0
    Cemetery:                         0.0

  # How many people are infected at the start of the simulation, with these agents being chosen
  # uniformly at random:
  initial_infections: 100
  # How many susceptible people are randomly selected for exposure on midnight each day:
  random_exposures: 0
  # Home activity type, recorded for telemetry purposes
  home_activity_type: House
  # The health states appearing in this model are as follows:
  health_states: [SUSCEPTIBLE, EXPOSED, ASYMPTOMATIC, PREINFECTED, INFECTED, HOSPITALIZING, VENTILATING, RECOVERED, DEAD]
  # Agents in the follow states are susceptible:
  susceptible_states: [SUSCEPTIBLE]
  # Agents in the following states are categorized as exposed:
  incubating_states: [EXPOSED]
  # Agents in the following states can transmit the virus:
  contagious_states: [ASYMPTOMATIC, PREINFECTED, INFECTED, HOSPITALIZING, VENTILATING]
  # Agents in the following states are symptomatic:
  symptomatic_states: [INFECTED, HOSPITALIZING, VENTILATING]
  # Agents in the following states are contagious but asymptomatic:
  asymptomatic_states: [ASYMPTOMATIC, PREINFECTED]
  # Agents in the following states will be moved to a hospital:
  hospital_states: [HOSPITALIZING, VENTILATING]
  # Agents in the following states will be moved to a cemetery:
  dead_states: [DEAD]
  # A list of possibile trajectories through the health states is encoded as follows:
  disease_profile_list: [SEAR, SEPIR, SEPID, SEPIHR, SEPIHD, SEPIHVHR, SEPIHVD]
  # The reduction in transmission probability among agents in asymptomatic states:
  asympt_factor: 0.55
  # For a given age x and step size
  disease_profile_distribution_by_age_step_size: 5
  # the following dictionary provides a probability distribution over the list of disease profiles
  # for agents belonging to the age range range(x,x+d), where d equals the step size:
  disease_profile_distribution_by_age:
    0:    [0.71,0.269716024,0,0.010141988,0,0.010141988,0]
    5:    [0.71,0.278956502,0,0.011043498,0,0,0]
    10:   [0.79,0.21,0,0,0,0,0]
    15:   [0.79,0.205791044,0,0.002104478,0,0.002104478,0]
    20:   [0.73,0.255836189,0,0.014163811,0,0,0]
    25:   [0.73,0.263128448,0,0.006871552,0,0,0]
    30:   [0.67,0.31064292,0,0.017974432,0,0.001382649,0]
    35:   [0.67,0.309407444,0,0.019008513,0,0.001584043,0]
    40:   [0.6,0.355022407,0,0.03418297,0,0.010794622,0]
    45:   [0.6,0.345350688,0,0.045280858,0,0.009368453,0]
    50:   [0.51,0.425408717,0,0.056992308,0,0.007598974,0]
    55:   [0.51,0.371044387,0,0.109625761,0,0.009329852,0]
    60:   [0.37,0.450067141,0,0.143946287,0,0.02998881,0.005997762]
    65:   [0.37,0.375572645,0.01375283,0.185663205,0,0.03143504,0.02357628]
    70:   [0.31,0.183250315,0,0.366073044,0.03137769,0.054649476,0.054649476]
    75:   [0.31,0.120160996,0.042737925,0.390668471,0.050956757,0.085475851,0]
    80:   [0.31,0.00682635,0.118241593,0.355819609,0.156560628,0.017517273,0.035034546]
    85:   [0.31,0.080507251,0.14627826,0.288154627,0.162870007,0,0.012189855]
    90:   [0.31,0.060234992,0.218489901,0.231342248,0.179932859,0,0]
  # Disease durations in days (C: constant, G: gamma, U: uniform):
  durations_by_profile:
    SEAR:     [None,[G,[4,0.75]],[G,[4,1.25]] ,None]
    SEPIR:    [None,[G,[4,0.75]],[G,[4,0.525]],[G,[4,0.725]],None]
    SEPID:    [None,[G,[4,0.75]],[G,[4,0.525]],[U,[10,15]]  ,None]
    SEPIHR:   [None,[G,[4,0.75]],[G,[4,0.525]],[U,[5,9]]    ,[U,[8,21]],None]
    SEPIHD:   [None,[G,[4,0.75]],[G,[4,0.525]],[U,[5,9]]    ,[U,[5,16]],None]
    SEPIHVHR: [None,[G,[4,0.75]],[G,[4,0.525]],[U,[5,9]]    ,[U,[3,5]] ,[U,[2,12]],[U,[2,4]],None]
    SEPIHVD:  [None,[G,[4,0.75]],[G,[4,0.525]],[U,[5,9]]    ,[U,[3,5]] ,[U,[7,10]],None]

# ######################################### Interventions ##########################################
# Interventions list
#
# Each intervention has a unique ID, a type, and a configuration block.
# These interventions occur in-order in the simulation.  This is important because some,
# such as quarantine, may interrupt actions other are interested in.
interventions:

  # Moves agents to locations when they are in certain health states
  basic_hospitalisation:
    # This special key defines the class to use.
    __type__: hospitalisation.Hospitalisation
    __prng_seed__: 999
    # Starting state of the intervention
    __enabled__: true
    # This special key defines when to disable/enable the intervention
    __schedule__:
    # Things below this line are passed to the intervention as config

    # Agents in the following states will be moved to a hospital:
    hospital_states: [HOSPITALIZING, VENTILATING]
    # Agents in the following states will be moved to a cemetery:
    dead_states: [DEAD]
    # How to find locations to move agents to
    cemetery_location_type: Cemetery
    hospital_location_type: Hospital


  # The intervention refers to a system that distributes
  # invitations to test, across the population, according to a certain algorithm.
  large_scale_testing:
    __type__: testing.LargeScaleTesting
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      17th May 2020: enable
      18th May 2020: {"invitations_per_day": 1937}
      19th May 2020: {"invitations_per_day": 0}      
      25th May 2020: {"invitations_per_day": 58381}
      26th May 2020: {"invitations_per_day": 0}
      2nd June 2020: {"invitations_per_day": 47487}
      3rd June 2020: {"invitations_per_day": 0}
      8th June 2020: {"invitations_per_day": 153909}
      9th June 2020: {"invitations_per_day": 0}
      15th June 2020: {"invitations_per_day": 158136}
      16th June 2020: {"invitations_per_day": 0}
      22nd June 2020: {"invitations_per_day": 138417}
      23rd June 2020: {"invitations_per_day": 0}
      29th June 2020: {"invitations_per_day": 190932}
      30th June 2020: {"invitations_per_day": 0}
      6th July 2020: {"invitations_per_day": 187658}
      7th July 2020: {"invitations_per_day": 0}
      13th July 2020: {"invitations_per_day": 188499}
      14th July 2020: {"invitations_per_day": 0}
      17th July 2020: {"invitations_per_day": 41061}
      18th July 2020: {"invitations_per_day": 0}
      20th July 2020: {"invitations_per_day": 64479}
      21st July 2020: {"invitations_per_day": 0}
      27th July 2020: {"invitations_per_day": 71988}
      28th July 2020: {"invitations_per_day": 0}
      3rd August 2020: {"invitations_per_day": 35242}
      4th August 2020: {"invitations_per_day": 0}
      10th August 2020: {"invitations_per_day": 50342}
      11th August 2020: {"invitations_per_day": 0}
      17th August 2020: {"invitations_per_day": 8084}
      18th August 2020: {"invitations_per_day": 0}
      24th August 2020: {"invitations_per_day": 35242}
      25th August 2020: {"invitations_per_day": 0}
      31st August 2020: {"invitations_per_day": 26907}
      1st September 2020: {"invitations_per_day": 0}
      7th September 2020: {"invitations_per_day": 26908}
      8th September 2020: {"invitations_per_day": 0}
      14th September 2020: {"invitations_per_day": 54000}
      15th September 2020: {"invitations_per_day": 0}
      21st September 2020: {"invitations_per_day": 54000}
      22nd September 2020: {"invitations_per_day": 0}
      28th September 2020: {"invitations_per_day": 54000}
      29th September 2020: {"invitations_per_day": 0}
      5th October 2020: {"invitations_per_day": 54000}
      6th October 2020: {"invitations_per_day": 0}
      12th October 2020: {"invitations_per_day": 54000}
      13th October 2020: {"invitations_per_day": 0}
      19th October 2020: {"invitations_per_day": 54000}
      20th October 2020: {"invitations_per_day": 0}
      26th October 2020: {"invitations_per_day": 54000}
      27th October 2020: {"invitations_per_day": 0}
      2nd November 2020: {"invitations_per_day": 54000}
      3rd November 2020: {"invitations_per_day": 0}
      9th November 2020: {"invitations_per_day": 54000}
      10th November 2020: {"invitations_per_day": 0}
      16th November 2020: {"invitations_per_day": 54000}
      17th November 2020: {"invitations_per_day": 0}
      23rd November 2020: {"invitations_per_day": 54000}
      30th November 2020: {"invitations_per_day": 0}

    # The number of agents selected uniformly at random for testing each day:
    invitations_per_day: 0
    # The distribution of time between an invitation to test being received
    # and the agent booking a test:
    invitation_to_test_booking_days:
      {1: 106, 2: 122, 3: 102, 4: 81, 5: 50, 6: 37, 7: 37, 8: 26, 9: 26, 10: 23, 11: 23, 12: 19, 13: 19, 14: 9, 15: 9, 16: 12, 17: 12, 18: 11, 19: 11, 20: 7, 21: 7, 22: 6, 23: 6, 24: 9, 25: 9, 26: 7, 27: 7, 28: 6, 29: 6, 30: 8, 31: 8, 32: 7, 33: 7, 34: 6, 35: 6, 36: 4, 37: 4, 38: 5, 39: 5, 40: 4, 41: 4, 42: 3, 43: 3, 44: 3, 45: 3, 46: 3, 47: 2, 48: 2, 49: 2, 50: 2, 51: 2, 52: 2, 53: 2, 54: 2, 55: 2, 56: 2, 57: 1, 58: 1, 59: 1, 60: 1, 61: 1, 62: 1, 63: 1, 64: 1, 65: 1, 66: 1, 67: 1, 68: 1, 69: 1, 70: 1, 71: 1, 72: 1, 73: 1, 74: 1, 75: 1}


  # The intervention 'other_testing' refers to situations where an agent books a test without having
  # been directed to do so by any of the other interventions. Chief among these are the situations in
  # which an agent voluntarily books a test having developed symptoms.
  prescription_testing:
    __type__: testing.PrescriptionTesting
    __prng_seed__: 999
    __enabled__: true
    __schedule__:
    # The probability that an agent books a test at the moment they develop symptoms. This corresponds
    # to the real-world scenario in which an agent develops symptoms and goes to see a doctor, who
    # recommends the agent to get tested.
    prob_test_symptoms: 1.0
    # Time between onset of symptoms and booking of a test:
    onset_of_symptoms_to_test_booking_days: 1
    # Agents in the following states are symptomatic:
    symptomatic_states: [INFECTED, HOSPITALIZING, VENTILATING]


  # The intervention 'test_booking' simply refer to the system that books tests for agents, should
  # they request a booking.
  test_booking:
    __type__: laboratory.TestBooking
    __prng_seed__: 999
    __enabled__: true
    __schedule__:
    # The time taken between the booking of a test and the time at which the test takes place, in the
    # case where the agent is not showing symptoms at the time of booking:
    test_booking_to_test_sample_days_no_symptoms: 4
    # The time taken between the booking of a test and the time at which the test takes place, in the
    # case where the agent is showing symptoms at the time of booking:
    test_booking_to_test_sample_days_symptoms: 2
    # Agents in the following states are symptomatic:
    symptomatic_states: [INFECTED, HOSPITALIZING, VENTILATING]


  # The intervention 'test_sampling' refers to lab testing. If an agent is tested and if the agent is
  # is either incubating or contagious with the virus, then the test returns a positive result, except
  # in the case of a false postive, while if the agent is not either incubating or contagious with the
  # virus, then the test returns a negative results, except in the case of a false negative.
  test_lab:
    __type__: laboratory.Laboratory
    __prng_seed__: 999
    __enabled__: true
    __schedule__:
      24 February 2020: {max_tests_per_day: 2}
      25 February 2020: {max_tests_per_day: 7}
      26 February 2020: {max_tests_per_day: 2}
      27 February 2020: {max_tests_per_day: 1}
      28 February 2020: {max_tests_per_day: 7}
      29 February 2020: {max_tests_per_day: 1}
      01 March 2020: {max_tests_per_day: 1}
      02 March 2020: {max_tests_per_day: 7}
      03 March 2020: {max_tests_per_day: 4}
      04 March 2020: {max_tests_per_day: 1}
      05 March 2020: {max_tests_per_day: 6}
      06 March 2020: {max_tests_per_day: 9}
      07 March 2020: {max_tests_per_day: 6}
      08 March 2020: {max_tests_per_day: 0}
      09 March 2020: {max_tests_per_day: 16}
      10 March 2020: {max_tests_per_day: 25}
      11 March 2020: {max_tests_per_day: 51}
      12 March 2020: {max_tests_per_day: 199}
      13 March 2020: {max_tests_per_day: 205}
      14 March 2020: {max_tests_per_day: 107}
      15 March 2020: {max_tests_per_day: 25}
      16 March 2020: {max_tests_per_day: 427}
      17 March 2020: {max_tests_per_day: 676}
      18 March 2020: {max_tests_per_day: 957}
      19 March 2020: {max_tests_per_day: 981}
      20 March 2020: {max_tests_per_day: 1129}
      21 March 2020: {max_tests_per_day: 491}
      22 March 2020: {max_tests_per_day: 21}
      23 March 2020: {max_tests_per_day: 1220}
      24 March 2020: {max_tests_per_day: 1005}
      25 March 2020: {max_tests_per_day: 1028}
      26 March 2020: {max_tests_per_day: 5726}
      27 March 2020: {max_tests_per_day: 1317}
      28 March 2020: {max_tests_per_day: 1062}
      29 March 2020: {max_tests_per_day: 370}
      30 March 2020: {max_tests_per_day: 1346}
      31 March 2020: {max_tests_per_day: 1231}
      01 April 2020: {max_tests_per_day: 1511}
      02 April 2020: {max_tests_per_day: 1585}
      03 April 2020: {max_tests_per_day: 1515}
      04 April 2020: {max_tests_per_day: 1012}
      05 April 2020: {max_tests_per_day: 755}
      06 April 2020: {max_tests_per_day: 1304}
      07 April 2020: {max_tests_per_day: 1311}
      08 April 2020: {max_tests_per_day: 1190}
      09 April 2020: {max_tests_per_day: 1079}
      10 April 2020: {max_tests_per_day: 896}
      11 April 2020: {max_tests_per_day: 411}
      12 April 2020: {max_tests_per_day: 259}
      13 April 2020: {max_tests_per_day: 87}
      14 April 2020: {max_tests_per_day: 1816}
      15 April 2020: {max_tests_per_day: 1108}
      16 April 2020: {max_tests_per_day: 1193}
      17 April 2020: {max_tests_per_day: 1270}
      18 April 2020: {max_tests_per_day: 667}
      19 April 2020: {max_tests_per_day: 235}
      20 April 2020: {max_tests_per_day: 1191}
      21 April 2020: {max_tests_per_day: 1054}
      22 April 2020: {max_tests_per_day: 1463}
      23 April 2020: {max_tests_per_day: 998}
      24 April 2020: {max_tests_per_day: 1778}
      25 April 2020: {max_tests_per_day: 790}
      26 April 2020: {max_tests_per_day: 144}
      27 April 2020: {max_tests_per_day: 988}
      28 April 2020: {max_tests_per_day: 2021}
      29 April 2020: {max_tests_per_day: 2116}
      30 April 2020: {max_tests_per_day: 2366}
      01 May 2020: {max_tests_per_day: 1608}
      02 May 2020: {max_tests_per_day: 884}
      03 May 2020: {max_tests_per_day: 280}
      04 May 2020: {max_tests_per_day: 1272}
      05 May 2020: {max_tests_per_day: 1598}
      06 May 2020: {max_tests_per_day: 1848}
      07 May 2020: {max_tests_per_day: 1854}
      08 May 2020: {max_tests_per_day: 1698}
      09 May 2020: {max_tests_per_day: 867}
      10 May 2020: {max_tests_per_day: 238}
      11 May 2020: {max_tests_per_day: 1247}
      12 May 2020: {max_tests_per_day: 1763}
      13 May 2020: {max_tests_per_day: 1566}
      14 May 2020: {max_tests_per_day: 1663}
      15 May 2020: {max_tests_per_day: 1704}
      16 May 2020: {max_tests_per_day: 1285}
      17 May 2020: {max_tests_per_day: 173}
      18 May 2020: {max_tests_per_day: 1111}
      19 May 2020: {max_tests_per_day: 1372}
      20 May 2020: {max_tests_per_day: 1747}
      21 May 2020: {max_tests_per_day: 1004}
      22 May 2020: {max_tests_per_day: 1414}
      23 May 2020: {max_tests_per_day: 1536}
      24 May 2020: {max_tests_per_day: 103}
      25 May 2020: {max_tests_per_day: 1079}
      26 May 2020: {max_tests_per_day: 1611}
      27 May 2020: {max_tests_per_day: 1408}
      28 May 2020: {max_tests_per_day: 2456}
      29 May 2020: {max_tests_per_day: 3087}
      30 May 2020: {max_tests_per_day: 2456}
      31 May 2020: {max_tests_per_day: 227}
      01 June 2020: {max_tests_per_day: 724}
      02 June 2020: {max_tests_per_day: 2432}
      03 June 2020: {max_tests_per_day: 2620}
      04 June 2020: {max_tests_per_day: 2346}
      05 June 2020: {max_tests_per_day: 4029}
      06 June 2020: {max_tests_per_day: 2339}
      07 June 2020: {max_tests_per_day: 685}
      08 June 2020: {max_tests_per_day: 3278}
      09 June 2020: {max_tests_per_day: 3615}
      10 June 2020: {max_tests_per_day: 5244}
      11 June 2020: {max_tests_per_day: 4813}
      12 June 2020: {max_tests_per_day: 7552}
      13 June 2020: {max_tests_per_day: 3931}
      14 June 2020: {max_tests_per_day: 766}
      15 June 2020: {max_tests_per_day: 6286}
      16 June 2020: {max_tests_per_day: 6123}
      17 June 2020: {max_tests_per_day: 7419}
      18 June 2020: {max_tests_per_day: 7425}
      19 June 2020: {max_tests_per_day: 8505}
      20 June 2020: {max_tests_per_day: 6382}
      21 June 2020: {max_tests_per_day: 606}
      22 June 2020: {max_tests_per_day: 7490}
      23 June 2020: {max_tests_per_day: 164}
      24 June 2020: {max_tests_per_day: 6247}
      25 June 2020: {max_tests_per_day: 6536}
      26 June 2020: {max_tests_per_day: 7205}
      27 June 2020: {max_tests_per_day: 6144}
      28 June 2020: {max_tests_per_day: 1041}
      29 June 2020: {max_tests_per_day: 9585}
      30 June 2020: {max_tests_per_day: 8770}
      01 July 2020: {max_tests_per_day: 11146}
      02 July 2020: {max_tests_per_day: 12253}
      03 July 2020: {max_tests_per_day: 12137}
      04 July 2020: {max_tests_per_day: 8784}
      05 July 2020: {max_tests_per_day: 1226}
      06 July 2020: {max_tests_per_day: 12413}
      07 July 2020: {max_tests_per_day: 11895}
      08 July 2020: {max_tests_per_day: 13475}
      09 July 2020: {max_tests_per_day: 12919}
      10 July 2020: {max_tests_per_day: 6386}
      11 July 2020: {max_tests_per_day: 8853}
      12 July 2020: {max_tests_per_day: 5389}
      13 July 2020: {max_tests_per_day: 12238}
      14 July 2020: {max_tests_per_day: 14289}
      15 July 2020: {max_tests_per_day: 17700}
      16 July 2020: {max_tests_per_day: 15922}
      17 July 2020: {max_tests_per_day: 17082}
      18 July 2020: {max_tests_per_day: 15251}
      19 July 2020: {max_tests_per_day: 3611}
      20 July 2020: {max_tests_per_day: 11953}
      21 July 2020: {max_tests_per_day: 20782}
      22 July 2020: {max_tests_per_day: 9050}
      23 July 2020: {max_tests_per_day: 19280}
      24 July 2020: {max_tests_per_day: 13319}
      25 July 2020: {max_tests_per_day: 7847}
      26 July 2020: {max_tests_per_day: 1304}
      27 July 2020: {max_tests_per_day: 17899}
      28 July 2020: {max_tests_per_day: 10290}
      29 July 2020: {max_tests_per_day: 8513}
      30 July 2020: {max_tests_per_day: 11861}
      31 July 2020: {max_tests_per_day: 10451}
      01 August 2020: {max_tests_per_day: 7452}
      02 August 2020: {max_tests_per_day: 1026}
      03 August 2020: {max_tests_per_day: 7379}
      04 August 2020: {max_tests_per_day: 9208}
      05 August 2020: {max_tests_per_day: 11636}
      06 August 2020: {max_tests_per_day: 7299}
      07 August 2020: {max_tests_per_day: 7843}
      08 August 2020: {max_tests_per_day: 6628}
      09 August 2020: {max_tests_per_day: 526}
      10 August 2020: {max_tests_per_day: 6078}
      11 August 2020: {max_tests_per_day: 7663}
      12 August 2020: {max_tests_per_day: 5549}
      13 August 2020: {max_tests_per_day: 5404}
      14 August 2020: {max_tests_per_day: 9448}
      15 August 2020: {max_tests_per_day: 3032}
      16 August 2020: {max_tests_per_day: 772}
      17 August 2020: {max_tests_per_day: 4018}
      18 August 2020: {max_tests_per_day: 6531}
      19 August 2020: {max_tests_per_day: 10251}
      20 August 2020: {max_tests_per_day: 6093}
      21 August 2020: {max_tests_per_day: 9536}
      22 August 2020: {max_tests_per_day: 6722}
      23 August 2020: {max_tests_per_day: 1217}
      24 August 2020: {max_tests_per_day: 3420}
      25 August 2020: {max_tests_per_day: 8227}
      26 August 2020: {max_tests_per_day: 7141}
      27 August 2020: {max_tests_per_day: 10175}
      28 August 2020: {max_tests_per_day: 8739}
      29 August 2020: {max_tests_per_day: 7831}
      30 August 2020: {max_tests_per_day: 1154}
      31 August 2020: {max_tests_per_day: 6248}
      01 September 2020: {max_tests_per_day: 11629}
      02 September 2020: {max_tests_per_day: 8779}
      03 September 2020: {max_tests_per_day: 8684}
      04 September 2020: {max_tests_per_day: 10435}
      05 September 2020: {max_tests_per_day: 8272}
      06 September 2020: {max_tests_per_day: 1297}
      07 September 2020: {max_tests_per_day: 5785}
      08 September 2020: {max_tests_per_day: 11058}
      09 September 2020: {max_tests_per_day: 8589}
      10 September 2020: {max_tests_per_day: 9873}
      11 September 2020: {max_tests_per_day: 10888}
      12 September 2020: {max_tests_per_day: 8503}
      13 September 2020: {max_tests_per_day: 1602}
      14 September 2020: {max_tests_per_day: 8396}
      15 September 2020: {max_tests_per_day: 11485}
      16 September 2020: {max_tests_per_day: 10043}
      17 September 2020: {max_tests_per_day: 5058}
      18 September 2020: {max_tests_per_day: 5911}
      19 September 2020: {max_tests_per_day: 4594}
      20 September 2020: {max_tests_per_day: 1106}
      21 September 2020: {max_tests_per_day: 7926}
      22 September 2020: {max_tests_per_day: 7515}
      23 September 2020: {max_tests_per_day: 7477}
      24 September 2020: {max_tests_per_day: 7426}
      25 September 2020: {max_tests_per_day: 7358}
      26 September 2020: {max_tests_per_day: 6423}
      27 September 2020: {max_tests_per_day: 1000}
      28 September 2020: {max_tests_per_day: 6482}
      29 September 2020: {max_tests_per_day: 8659}
      30 September 2020: {max_tests_per_day: 7287}
      01 October 2020: {max_tests_per_day: 8479}
      02 October 2020: {max_tests_per_day: 8017}
      03 October 2020: {max_tests_per_day: 6628}
      04 October 2020: {max_tests_per_day: 1245}
      05 October 2020: {max_tests_per_day: 6435}
      06 October 2020: {max_tests_per_day: 7923}
      07 October 2020: {max_tests_per_day: 8228}
      08 October 2020: {max_tests_per_day: 9453}
      09 October 2020: {max_tests_per_day: 8942}
      10 October 2020: {max_tests_per_day: 6679}
      11 October 2020: {max_tests_per_day: 1159}
      12 October 2020: {max_tests_per_day: 8337}
      13 October 2020: {max_tests_per_day: 9617}
      14 October 2020: {max_tests_per_day: 8630}
      15 October 2020: {max_tests_per_day: 11478}
      16 October 2020: {max_tests_per_day: 10787}
      17 October 2020: {max_tests_per_day: 11099}
      18 October 2020: {max_tests_per_day: 1307}
      19 October 2020: {max_tests_per_day: 7807}
      20 October 2020: {max_tests_per_day: 10163}
      21 October 2020: {max_tests_per_day: 17801}
      22 October 2020: {max_tests_per_day: 11336}
      23 October 2020: {max_tests_per_day: 14969}
      24 October 2020: {max_tests_per_day: 12843}
      25 October 2020: {max_tests_per_day: 2297}
      26 October 2020: {max_tests_per_day: 11164}
      27 October 2020: {max_tests_per_day: 15531}
      28 October 2020: {max_tests_per_day: 10833}
      29 October 2020: {max_tests_per_day: 15650}
      30 October 2020: {max_tests_per_day: 17026}
      31 October 2020: {max_tests_per_day: 16577}
      01 November 2020: {max_tests_per_day: 7888}
      02 November 2020: {max_tests_per_day: 10212}
      03 November 2020: {max_tests_per_day: 13394}
      04 November 2020: {max_tests_per_day: 14376}
      05 November 2020: {max_tests_per_day: 14929}
    # Maximum number of tests performed each day, with additional tests booked being cancelled:
    max_tests_per_day: 0
    # The probability of a false positive:
    prob_false_positive: 0.01
    # The probability of a false negative:
    prob_false_negative: 0.01
    # The time taken between a test and publishing of the result of that test:
    do_test_to_test_results_days: 2
    # Home activity type, used in reporting to keep track of where tested agents live
    home_activity_type: House
    # Non-resident home types:
    border_countries: [Belgium, France, Germany]
    # Agents in the following states are categorized as exposed:
    incubating_states: [EXPOSED]
    # Agents in the following states can transmit the virus:
    contagious_states: [ASYMPTOMATIC, PREINFECTED, INFECTED, HOSPITALIZING, VENTILATING]


  # The intervention 'contact_tracing_app' refers to contact tracing perform not manually, but via an
  # application installed on the phones of agents. A certain proportion of the population is assumed
  # to possess the app from the very beginning. The app works according to the Corona-Warn-App, which
  # is the official COVID-19 exposure notification app developed for Germany. The window of time over
  # which contacts are considered is specified.
  contact_tracing_app:
    __type__: contact_tracing.ContactTracingApp
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
    # Proportion of population who have the app:
    app_prevalence: 0.2
    # The window of time over which contacts are considered:
    tracing_time_window_days: 14
    # Contacts are assumed to occur when two agents are in the same location at the same time. So long
    # as the tick length is at least 600 seconds, this assumption implies the following vaules for the
    # app parameters, full details of which are described in the documentation of the Corona-Warn-App:
    duration_wgt: 1
    attenuation_wgt: 1
    days_since_last_expsr_wgt: 5
    # The risk level is calculated according to the base case specified by the Corona-Warn-App, the
    # units of the indices being days and the length of which should be equal to the window length:
    trans_risk_level_base_case: [5, 6, 8, 8, 8, 5, 3, 1, 1, 1, 1, 1, 1, 1]
    # Threshold parameters as specified by the Corona-Warn-App:
    trans_risk_threshold: 11
    time_at_risk_threshold_mins: 15
    # Average risk used in calculating total time at risk, as specified by the Corona-Warn-App:
    av_risk_mins: 25
    # Agents follow the advice to quarantine and immediately book a test with the following
    # probability:
    prob_do_recommendation: 1.0
    # Locations except from the contact tracing proceedure are as follows:
    location_blacklist: [Outdoor, Cemetery, Belgium, France, Germany]


  # The intervention 'contact_tracing' refers to the manual tracing of contacts of agents with postive
  # test results. The maximum number of positive agents whose contacts can be traced is specified, as
  # is the window of time over which such contacts are registered. Contacts are considered to be
  # agents who performed one of the specified regular activities in the same location as the agent, so
  # long as the agent was also performing one such activity. For example, if the agent was working in
  # a given location and another agent was also working there, at the same time, then the agent would
  # remember the contact with the other agent. Conversely, if the location was, for example, a shop
  # with the other agent only shopping there, then the first agent would not remember this. Other
  # agents traced though this proceedure are instructed to get tested and quarantine in the meantime.
  # With a certain probability, agents do not follow this advice and continue as normal.
  contact_tracing_manual:
    __type__: contact_tracing.ContactTracingManual
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      20th April 2020: enable
      1st July 2020: {max_per_day: 200}
      1st August 2020: {max_per_day: 350}
      1st September 2020: {max_per_day: 500}
      1st November 2020: {max_per_day: 600}
    # The maximum number of positive agents whose contacts can be tested each day:
    max_per_day: 100
    # The window of time over which contacts are considered:
    tracing_time_window_days: 2
    # The activities considered relevant for the purposes of contact tracing:
    relevant_activities: [House, Work, School, Visit]
    # Agents follow the advice to quarantine and immediately book a test with the following
    # probability:
    prob_do_recommendation: 1.0
    # Locations except from the contact tracing proceedure are as follows:
    location_type_blacklist: [Cemetery, Outdoor, Belgium, France, Germany]


  # The intervention 'quarantine' directs agents to return home, under certain conditions. The list of
  # possible conditions includes that the agent has tested positive, the agent has been recommended to
  # quarantine after contact tracing (either manually or via the app) and that the agent is trying to
  # access a prohibited location (for example, a border worker during a period of border closure). The
  # intervention 'quarantine' is the tool that enforces and lifts such quarantines. Requests for
  # quarantines are made by other interventions.
  quarantine_at_home:
    __type__: quarantine.Quarantine
    __prng_seed__: 999
    __enabled__: true
    __schedule__:
      23rd September 2020: {default_duration_days: 10}
    # If this is true, disabling quarantine immediately allows people to change
    # else it simply disables putting new people into quarantine, and they still have to
    # wait out their allotted time.
    disable_releases_immediately: false
    # Quarantining directs an agent home for a default duration:
    default_duration_days: 14
    # In the case that a quarantine has been imposed on an agent on an individual basis, and if that
    # agent tests negative during such a quarantine, then the quarantine of that agent will end after
    # the following number of days:
    negative_test_result_to_end_quarantine_days: 2
    # If an agent is present in one of the following locations, then they are exempt from quarantining
    # under all circumstances:
    location_blacklist: [Hospital, Cemetery]
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House
    # home_activity_type: Outdoor


  # The interventions 'location_closure' refer to closure of all locations of a certain type. In the
  # event that an agent would otherwise move to such a location, that move will be cancelled or
  # overridden with the agent being sent home.

  location_closure_house:
    __type__: location_closure.LocationClosures
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      15th March 2020: enable
      11th May 2020: disable
    # A list of location type subject to possible closures, one of the notable exceptions being shops.
    # Whether or not a location is closed may depend on the activity in question (for example, visits
    # to care homes may be prohibited while residents and workers continue to be able to access the
    # care home.
    locations:
      - House
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House

  location_closure_carehome:
    __type__: location_closure.LocationClosures
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      15th March 2020: enable
      20th May 2020: disable
    # A list of location type subject to possible closures, one of the notable exceptions being shops.
    # Whether or not a location is closed may depend on the activity in question (for example, visits
    # to care homes may be prohibited while residents and workers continue to be able to access the
    # care home.
    locations:
      - Care Home
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House

  location_closure_ow_general:
    __type__: location_closure.LocationClosures
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      19th March 2020: enable
      24th June 2020: disable
    # A list of location type subject to possible closures, one of the notable exceptions being shops.
    # Whether or not a location is closed may depend on the activity in question (for example, visits
    # to care homes may be prohibited while residents and workers continue to be able to access the
    # care home.
    locations:
      - OW Agriculture
      - OW Manufacturing
      - OW Energy
      - OW Water
      - OW Transport
      - OW Extraction
      - OW Trade
      - OW ICT
      - OW Finance
      - OW Real Estate
      - OW Technical
      - OW Administration
      - OW Education
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House

  location_closure_ow_construction:
    __type__: location_closure.LocationClosures
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      19th March 2020: enable
      20th April 2020: disable
      31st July 2020: enable
      23rd August 2020: disable
    # A list of location type subject to possible closures, one of the notable exceptions being shops.
    # Whether or not a location is closed may depend on the activity in question (for example, visits
    # to care homes may be prohibited while residents and workers continue to be able to access the
    # care home.
    locations:
      - OW Construction
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House

  location_closure_ow_entertainment:
    __type__: location_closure.LocationClosures
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      15th March 2020: enable
      29th May 2020: disable
    # A list of location type subject to possible closures, one of the notable exceptions being shops.
    # Whether or not a location is closed may depend on the activity in question (for example, visits
    # to care homes may be prohibited while residents and workers continue to be able to access the
    # care home.
    locations:
      - OW Entertainment
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House

  location_closure_leisure:
    __type__: location_closure.LocationClosures
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      15th March 2020: enable
      29th May 2020: disable
      26th November 2020: enable
    # A list of location type subject to possible closures, one of the notable exceptions being shops.
    # Whether or not a location is closed may depend on the activity in question (for example, visits
    # to care homes may be prohibited while residents and workers continue to be able to access the
    # care home.
    locations:
      - Indoor Sport
      - Cinema or Theatre
      - Museum or Zoo
      - Restaurant
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House

  location_closure_pow:
    __type__: location_closure.LocationClosures
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      14th March 2020: enable
      29th May 2020: disable
    # A list of location type subject to possible closures, one of the notable exceptions being shops.
    # Whether or not a location is closed may depend on the activity in question (for example, visits
    # to care homes may be prohibited while residents and workers continue to be able to access the
    # care home.
    locations:
      - Place of Worship
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House

  location_closure_primary_school:
    __type__: location_closure.LocationClosures
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      16th March 2020: enable
      25th May 2020: disable
      16th July 2020: enable
      15th September 2020: disable
    # A list of location type subject to possible closures, one of the notable exceptions being shops.
    # Whether or not a location is closed may depend on the activity in question (for example, visits
    # to care homes may be prohibited while residents and workers continue to be able to access the
    # care home.
    locations:
      - Primary School
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House

  location_closure_secondary_school:
    __type__: location_closure.LocationClosures
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      16th March 2020: enable
      11th May 2020: disable
      16th July 2020: enable
      15th September 2020: disable
    # A list of location type subject to possible closures, one of the notable exceptions being shops.
    # Whether or not a location is closed may depend on the activity in question (for example, visits
    # to care homes may be prohibited while residents and workers continue to be able to access the
    # care home.
    locations:
      - Seconary School
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House

    
  # The interventions 'work_from_home' direct people to work from home, with a certain probability
  work_from_home_ow_ict_finance:
    __type__: work_from_home.WorkFromHome
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      23th June 2020: enable
      24th June 2020: {prob_work_from_home: 0.85}
      1st July 2020: {prob_work_from_home: 0.75}
      1st October 2020: {prob_work_from_home: 0.33} # Q1 data
    # Probability to work from home:
    prob_work_from_home: 0.0
    # Location types exempt from working at home restrictions:
    locations:
      - OW ICT
      - OW Finance
    # If an agent requests to move to the location at which they perform the activity 'Work', they
    # are directed to the location at which they perform the activity 'House':
    home_activity_type: House
    work_activity_type: Work

  work_from_home_ow_technical:
    __type__: work_from_home.WorkFromHome
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      23th June 2020: enable
      24th June 2020: {prob_work_from_home: 0.68}
      1st July 2020: {prob_work_from_home: 0.65}
      1st October 2020: {prob_work_from_home: 0.40} # Q1 data
    # Probability to work from home:
    prob_work_from_home: 0.0
    # Location types exempt from working at home restrictions:
    locations:
      - OW Technical
    # If an agent requests to move to the location at which they perform the activity 'Work', they
    # are directed to the location at which they perform the activity 'House':
    home_activity_type: House
    work_activity_type: Work

  work_from_home_ow_administration:
    __type__: work_from_home.WorkFromHome
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      23th June 2020: enable
      24th June 2020: {prob_work_from_home: 0.53}
      1st July 2020: {prob_work_from_home: 0.24}
      1st October 2020: {prob_work_from_home: 0.15} # Q1 data
    # Probability to work from home:
    prob_work_from_home: 0.0
    # Location types exempt from working at home restrictions:
    locations:
      - OW Administration
    # If an agent requests to move to the location at which they perform the activity 'Work', they
    # are directed to the location at which they perform the activity 'House':
    home_activity_type: House
    work_activity_type: Work

  work_from_home_ow_education:
    __type__: work_from_home.WorkFromHome
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      23th June 2020: enable
      24th June 2020: {prob_work_from_home: 0.80}
      1st July 2020: {prob_work_from_home: 0.40}
      1st October 2020: {prob_work_from_home: 0.42} # Q1 data
    # Probability to work from home:
    prob_work_from_home: 0.0
    # Location types exempt from working at home restrictions:
    locations:
      - OW Education
    # If an agent requests to move to the location at which they perform the activity 'Work', they
    # are directed to the location at which they perform the activity 'House':
    home_activity_type: House
    work_activity_type: Work
 
  work_from_home_ow_other_activities:
    __type__: work_from_home.WorkFromHome
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      23th June 2020: enable
      24th June 2020: {prob_work_from_home: 0.37}
      1st July 2020: {prob_work_from_home: 0.28}
      1st October 2020: {prob_work_from_home: 0.24} # Q1 data
    # Probability to work from home:
    prob_work_from_home: 0.0
    # Location types exempt from working at home restrictions:
    locations:
      - OW Manufacturing
      - OW Trade
      - OW Transport
      - OW Energy
      - OW Water
      - OW Extraction
      - OW Real Estate
    # If an agent requests to move to the location at which they perform the activity 'Work', they
    # are directed to the location at which they perform the activity 'House':
    home_activity_type: House
    work_activity_type: Work


  # The interventions 'curfew' directs people to stay home between certain times.
  curfew:
    __type__: curfew.Curfew
    __prng_seed__: 999
    __enabled__: false
    __schedule__:
      26th October 2020: enable
    # Hours of operation
    start_time: 23
    end_time: 6
    # A list of location types subject to closures during given hours
    locations:
      - House
      - Care Home
      - OW Agriculture
      - OW Extraction
      - OW Manufacturing
      - OW Energy
      - OW Water
      - OW Construction
      - OW Trade
      - OW Transport
      - OW Catering and Accommodation
      - OW ICT
      - OW Finance
      - OW Real Estate
      - OW Technical
      - OW Administration
      - OW Education
      - OW Entertainment
      - OW Other Services
      - Primary School
      - Secondary School
      - Restaurant
      - Outdoor
      - Car
      - Public Transport
      - Shop
      - Medical
      - Hotel
      - Place of Worship
      - Indoor Sport
      - Cinema or Theatre
      - Museum or Zoo
    # Unless an agent is in an exempt location, they are directed to the location at which they
    # perform the activity 'House':
    home_activity_type: House

  # The intervention 'vaccination_a' refers to vaccination based on a strategy that prioritizes
  # care home residents and workers, then frontline health workers and then the remainder of the
  # population according to age, starting with the oldest. In this simple implementation, the
  # vaccine causes either total or no immunity with a certain probability, requires two doses, and
  # the effect is instantaneous. Also it is assumed that everybody wants to be vaccinated and that
  # those who have tested positive will not be eligible for vaccination.
  vaccination:
    __type__: vaccination.Vaccination
    __prng_seed__: 999
    __enabled__: true
    __schedule__:
      1st January 2021: {max_first_doses_per_day: 500}
    # This controls how many first doses are able to be distributed per day. The total number
    # of doses per day will be this number plus the number of second doses delivered that day.
    max_first_doses_per_day: 500
    # The probability that the vaccine protects an individual against disease. Note that if the
    # probability that the first dose is successful is p_1 and the probability that the second dose
    # is successful is p_2 then the probability that the agent is immunized after the second dose
    # is p_1 + (1-p_1)p_2. Therefore p_2 should be chosen appropriately.
    prob_first_dose_successful: 0.463
    prob_second_dose_successful: 0.175
    #prob_first_dose_successful: 0.90
    #prob_second_dose_successful: 0.50
    # Time between first and second doses:
    time_between_doses_days: 21
    # Vaccine hesitancy:
    age_low: 35
    age_high: 65
    prob_low: 0.54
    prob_med: 0.64
    prob_high: 0.86
    # Minimum age of people receiving the vaccine
    min_age: 16
    # Home activity type:
    home_activity_type: House
    # Work activity type:
    work_activity_type: Work
    # Care home location type:
    care_home_location_type: [Care Home]
    # Hospital location type:
    hospital_location_type: [Hospital]
